@startuml SalamanderUML

!theme reddress-lightred
left to right direction

' Place Ui at the top center
together {
    class Ui <<static class>>
}

class Account <<class>> {
    + int ID
    + User User
    + Currency Currency
    + string Account_name
    + double Balance
    + int Status 
    + int Type
    + float Interest
    + List <Transfer> TransferList
    + static Dictionary <int, Float> AccountTypes 
    + override string ToString()
}

class AccountManager {
    + static GetAccountTransferHistory()
    + static UpdateAccountBalance()
    + static UpdateAccountCurrency()
    + static void GetAccountsName()
    + static Account? GetAccount()
    + static Account ConvertAccountCurrency()
    + static bool CreateAccount()
}

class Auth <<class>> {
    + static User? Login()
    + static string HashPassword()
    + static string VerifyPassword()
}

class Currency <<class>> {
    + string Currency_code
    + float Exchange_rate
}

class CurrencyManager <<static class>> {
    + static async Task UpdateCurrenciesAsync()
    + static decimal GetExchangeRate()
    + static decimal ConvertCurrency()
    + static List<Currency> GetAllCurrencies()
}

class DB <<static class>> {
    + static string _dbFile
    + static string _conectionString
    + static void InitializeDatabase()
    + static void CreateTables()
    + static string Escape()   
}

class EmailService <<static class>> {
    + static Guid Code
    + static void SendEmail()
    + static void SendVerificationEmail()
    + static void SendTransactionEmail()
    + static void SendTransferEmail()
}

class Loan <<class>> {
    + int ID 
    + User User
    + decimal Amount
    + string currencycode
    + decimal InterestRate
    + int Status
    + Datetime LoanDate
}

class LoanManager <<class>> {
    + static decimal LoanAmountAllowed()
    + static decimal GetTotalLoans()
    + static decimal GetTotalBalance()
    + static Loan? CreateLoan()
    + static void GetLoansFromUser()
}

class Logo <<static class>> {
    + const string FireLogo
    + const string textLogo
    + static void DisplayFullLogo()
    + static void DisplayFireLogo()
    + static void DisplayTextLogo()
} 

class Program <<class>> {
    + static async Task Main()
}

class SmsService <<static class>> {
    + SendSms()
}

class Transfer <<class>> {
    + int ID
    + User SenderUser
    + Account SenderAccount
    + User ReceiverUser
    + Account ReceiverAccount
    + String Currencyode
    + decimal amount
    + DateTime TransferDate
    + int Processed
}

class TransferManager <<class>> {
    + static Queue<Transfer> transferQueue
    + static Transfer GetTransfer()
    + static void ProcessQueue()
    - static async processTransfer()
    - static bool AddTransferToDB()
    + static Transfer? CreateTransfer()
    + static Transfer GetTransfer()
}
 class Ui <<static class>> {
    - static string? _registeredFirstName
    - static string? _registeredLastName
    - static string? _registeredEmail
    - static string? _registeredPassword
    - static string? _registeredPhoneNumber
    - static User? _user
    - static readonly double DisplayPadding
    - const double MenuPadding
    - static string FirstNameDisplay
    - static string LastNameDisplay
    - static string EmailDisplay
    - static string PasswordDisplay
    - static string PhoneNumberDisplay
    - const string EmailPattern
    - const string PhoneNumberPattern
    - static void TitleScreen()
    + static async Task RunProgram()
    - static async Task DisplayMainMenu()
    - static async Task UserSignedIn()
    - static async Task CreateAccount()
    - static void CreateDefaultBankAccounts()
    - static async Task SignIn()
    - static void GetEmailOnSignIn()
    - static bool GetPasswordOnSignIn()
    - static async Task IsVerified()
    - static bool IsLocked()
    - static void SetUserValues()
    - static string GetFirstName()
    - static string GetLastName()
    - static string GetEmail()
    - static void GetPassword()
    - static string GetPhoneNumber()
    - static async Task VerifyAccount()
    - static void UserDetails()
    - static decimal GetTotalBalance()
    - static void BankAccounts()
    - static async Task UserChooseNewAccountType()
    - static async Task UserCreateNewAccount()
    - static void AccountDetails()
    - static void AccountOptions()
    - static void ChangeAccountName()
    - static async Task TransferFrom()
    - static async Task TransferTo()
    - static async Task SelectUser()
    - static async Task TransferFunds()
    - static void TransferAnimation()
    - static async Task ExchangeMenu()
    - static async Task Currencies()
    - static async Task CurrencyConverter()
    - static async Task ExchangeAnimation()
    - static async Task RunTaskAsync()
    - static async Task DepositLoanIn()
    - static async Task AmountToLoan()
    - static async Task AdminSignedIn()
    - static async Task TransactionHistory()
    - static async Task TransactionDisplay()
    - static async Task AdminCreateNewUser()
    - static void EraseFields()
    - static void ResetAdminFields()
    - static void PlaySound()
}
class User <<class>> {
    + int ID
    + int type
    + string First_name
    + string Last_name
    + string Email
    + string Password
    + string PhoneNumber
    + string Verified
    + int Locked
    + List <Account> Account
    + List <Loan> Loans
}

Class UserManager <<class>> {
    + static User? AddUser() 
    + static void VerifyUser()
    + static bool EmailExists()
    + static bool PhoneNumberExists()
    + static List<User> SearchUser()
    + static void ChangePassword()
    + static void UpdateUserPassword()
    + static void UpdateUserPhoneNumber()
    + static void UpdateUserEmail()
    + static void UpdateUserLock()
}

' Relationships between classes
'-------------------------------
AccountManager o-- Account : Manages
AccountManager ..> Account : Uses
AccountManager --> Transfer 
AccountManager ..> CurrencyManager : Uses
AccountManager ..> DB 
'--------------
Auth ..> User : "Uses for login and verification"
Auth ..> DB : "Uses to query users from database"
'-------------
CurrencyManager ..> DB 
CurrencyManager ..> AccountManager 
CurrencyManager ..> Currency : Uses
CurrencyManager ..> HttpClient : Uses
'-------------
Account --> Currency : Uses
'------------
Transfer o-- User : Sender and Receiver
Transfer o-- Account : ReceiverAccount & SenderAccount
'------------------
TransferManager o-- Transfer : Manages
TransferManager o-- Account : handles accounts 
TransferManager o-- User : manages users 
TransferManager o-- CurrencyManager : uses 
TransferManager o-- AccountManager : updates balances 
'----------------
Ui ..> DB : Uses for user account management
Ui --> Logo : Displays logo
Ui --> User : Stores current user details
Ui --> EmailService : Sends verification emails
Ui --> TransferManager 
Ui ..> LoanManager : Uses for loan management
'-------------
User o-- Account : has 
User o-- Loan : has
'------------
UserManager o-- User : Manages users
UserManager ..> DB : depends on
UserManager ..> Auth : depends on
'-----------
Program ..> Ui : Called method to display menu
'------------
EmailService ..> TransferManager 
'-------------
LoanManager o-- Loan : Manages loans
LoanManager ..> Loan : uses
LoanManager ..> DB 
'--------------
SmsService ..> HttpClient : Uses

@enduml
